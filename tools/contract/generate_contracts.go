package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	contractsDir := "../internal/contracts/openzeppelin-contracts/contracts"
	outputFile := "../internal/contracts/contracts.go"

	// Find all .sol files
	var embedPaths []string
	err := filepath.Walk(contractsDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if strings.HasSuffix(path, ".sol") {
			// Convert to relative path from contracts.go location
			relPath, err := filepath.Rel("../internal/contracts", path)
			if err != nil {
				return err
			}
			embedPaths = append(embedPaths, relPath)
		}
		return nil
	})
	if err != nil {
		fmt.Printf("Error walking directory: %v\n", err)
		os.Exit(1)
	}

	// Generate the contracts.go file
	content := `// Code generated by tools/contract/generate_contracts.go. DO NOT EDIT.

package contracts

import "embed"

// OpenZeppelin contracts are available as a git submodule at openzeppelin-contracts/
// These contracts are embedded at compile time for easy access during Solidity compilation
`

	// Add embed directives
	for _, path := range embedPaths {
		content += fmt.Sprintf("//go:embed %s\n", path)
	}

	content += "var OpenZeppelinFS embed.FS\n"

	// Write the file
	err = os.WriteFile(outputFile, []byte(content), 0644)
	if err != nil {
		fmt.Printf("Error writing file: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Generated %s with %d embedded contracts\n", outputFile, len(embedPaths))
}
